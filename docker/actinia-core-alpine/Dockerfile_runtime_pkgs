FROM mundialis/docker-pdal:2.1.0 as pdal
FROM mundialis/actinia-core:alpine-build-pkgs_v8

ENV SNAPPY_RUNTIME_PACKAGES="\
    python3 \
    # openjdk8 \
    "

ENV PDAL_RUNTIME_PACKAGES="\
    curl \
    jsoncpp \
    libexecinfo \
    libunwind \
    gdal \
    geos \
    libxml2 \
    postgresql \
    python3 \
    py3-numpy sqlite \
    "

# Keep basic packages for simple debugging
ENV GRASS_RUNTIME_BASIC_PACKAGES="gdal python3 zstd-libs"
ENV GRASS_RUNTIME_PACKAGES="\
    cairo \
    fftw \
    flex \
    gdal \
    geos \
    libpng \
    openjpeg \
    postgresql \
    proj-datumgrid \
    proj-util \
    python3 \
    py3-dateutil \
    py3-numpy \
    py3-pillow \
    py3-ply \
    py3-six \
    sqlite \
    sqlite-libs \
    zstd-libs \
    "
ENV GRASS_ADDONS_BUILD_PACKAGES="\
    build-base \
    cairo \
    fftw-dev \
    gcc \
    geos-dev \
    git \
    make \
    postgresql-dev \
    py3-numpy-dev \
    subversion \
    "

ENV ACTINIA_PLUGIN_INSTALL_PACKAGES="\
    curl \
    jq \
    python3-dev \
    "

ENV GOOGLE_CLOUD_BIGQUERY_PACKAGES="\
    libffi-dev \
    "

# coreutils is needed for 'du -sb' e.g. download_cache
# (installed du is from busybox)
ENV ACTINIA_RUNTIME_PACKAGES="\
    coreutils \
    zip \
    rsync \
    "

RUN apk update; \
    apk add --no-cache \
        $SNAPPY_RUNTIME_PACKAGES \
        $PDAL_RUNTIME_PACKAGES \
        $GRASS_RUNTIME_PACKAGES \
        $GRASS_ADDONS_BUILD_PACKAGES \
        $ACTINIA_PLUGIN_INSTALL_PACKAGES \
        $GOOGLE_CLOUD_BIGQUERY_PACKAGES \
        $ACTINIA_RUNTIME_PACKAGES

COPY --from=pdal /usr/bin/pdal* /usr/bin/
COPY --from=pdal /usr/lib/libpdal* /usr/lib/
COPY --from=pdal /usr/lib/pkgconfig/pdal.pc /usr/lib/pkgconfig/pdal.pc
COPY --from=pdal /usr/include/pdal /usr/include/pdal
COPY --from=pdal /usr/local/lib/liblaszip* /usr/local/lib/
COPY --from=pdal /usr/local/include/laszip /usr/local/include/laszip

ARG OPENJDK_VERSION=8.232.09-r0
ARG OPENJDK_PKGS_URL=https://github.com/mmacata/alpine-openjdk8/releases/download/$OPENJDK_VERSION
RUN curl -L $OPENJDK_PKGS_URL/openjdk8-$OPENJDK_VERSION.apk > openjdk8-$OPENJDK_VERSION.apk
RUN curl -L $OPENJDK_PKGS_URL/openjdk8-jre-$OPENJDK_VERSION.apk > openjdk8-jre-$OPENJDK_VERSION.apk
RUN curl -L $OPENJDK_PKGS_URL/openjdk8-jre-base-$OPENJDK_VERSION.apk > openjdk8-jre-base-$OPENJDK_VERSION.apk
RUN curl -L $OPENJDK_PKGS_URL/openjdk8-jre-lib-$OPENJDK_VERSION.apk > openjdk8-jre-lib-$OPENJDK_VERSION.apk
RUN apk add --allow-untrusted \
    openjdk8-jre-lib-$OPENJDK_VERSION.apk \
    openjdk8-$OPENJDK_VERSION.apk \
    openjdk8-jre-base-$OPENJDK_VERSION.apk \
    openjdk8-jre-$OPENJDK_VERSION.apk

# Duplicated in final images, only here to safe time
COPY requirements.txt /src/requirements.txt
RUN pip3 install -r /src/requirements.txt

# See in build stage why we need this here
# TODO: replace edge community packages as soon as possible.
RUN apk add --repository http://dl-cdn.alpinelinux.org/alpine/edge/community py3-joblib
# TODO: replace edge testing packages as soon as possible.
RUN apk add --repository http://dl-cdn.alpinelinux.org/alpine/edge/community py3-scikit-learn
