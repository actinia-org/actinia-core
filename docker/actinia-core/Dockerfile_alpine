FROM mundialis/grass-py3-pdal:stable-alpine as grass
FROM alpine:edge

LABEL authors="Carmen Tawalika,Anika Bettge,Markus Neteler,SÃ¶ren Gebbert"
LABEL maintainer="tawalika@mundialis.de,bettge@mundialis.de,neteler@mundialis.de,soerengebbert@gmail.com"

ENV LC_ALL "en_US.UTF-8"
ENV GDAL_CACHEMAX=2000
ENV GRASS_COMPRESSOR=ZSTD
ENV GRASS_SKIP_MAPSET_OWNER_CHECK 1

USER root

ENV BUILD_PACKAGES="\
    gcc \
    geos-dev \
    gdal-dev \
    git \
    jpeg-dev \
    libc-dev \
    linux-headers \
    make \
    postgresql-dev \
    python3-dev \
    subversion \
    zlib-dev \
    "

ENV PACKAGES="\
    cairo \
    gdal \
    # geos \
    libmagic \
    # postgresql \
    proj-datumgrid \
    proj-util \
    python3 \
    py3-scipy \
    py3-gdal \
    vim \
    zstd \
    zstd-libs \
    "

ENV ALPINE_TESTING_PACKAGES="\
    pdal \
    "

RUN echo "Install minimalistic dependencies and tools";\
    apk update; \
    apk add --no-cache $PACKAGES; \
    apk add --no-cache \
      --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing \
      $ALPINE_TESTING_PACKAGES; \
    apk add --no-cache --virtual .build-deps $BUILD_PACKAGES; \
    echo "Install step done"


# GRASS GIS related setup
COPY --from=grass /usr/local/bin/grass /usr/local/bin/grass
COPY --from=grass /usr/local/grass* /usr/local/grass

RUN pip3 install --upgrade pip
RUN pip3 install six grass-session

RUN ln -s /usr/local/grass /usr/local/grass7
RUN ln -s /usr/local/grass `grass --config path`

RUN grass --tmp-location EPSG:4326 --exec g.version -rge && \
    pdal --version && \
    python3 --version


# Install GRASS GIS addons
RUN git clone https://github.com/mundialis/openeo-addons.git /src/openeo-addons
COPY docker/actinia-core/grass_addons_list.csv /src/grass_addons_list.csv
RUN while IFS=, read -r ADDON SERVER; do unset URL; test -z $SERVER || URL="url=$SERVER"; grass --tmp-location EPSG:4326 --exec g.extension -s extension=$ADDON $URL;done < /src/grass_addons_list.csv


# Install actinia-core
COPY . /src/actinia_core
WORKDIR /src/actinia_core
RUN git checkout .
RUN ln -s /actinia_core /root/actinia
# # update build tools for creating wheel
RUN pip3 install -r requirements-alpine.txt && python3 setup.py install
# RUN python3 -m pip install --user --upgrade setuptools wheel
RUN python3 setup.py sdist bdist_wheel


# Install actinia-core plugins
RUN git config --global http.sslVerify false

# Install statistics plugin
RUN git clone https://github.com/mundialis/actinia_statistic_plugin.git /src/actinia_statistic_plugin
WORKDIR /src/actinia_statistic_plugin
RUN pip3 install -r requirements.txt && python3 setup.py install
RUN python3 setup.py sdist bdist_wheel

# Install satellite plugin
RUN git clone https://github.com/mundialis/actinia_satellite_plugin.git /src/actinia_satellite_plugin
WORKDIR /src/actinia_satellite_plugin
RUN pip3 install -r requirements.txt && python3 setup.py install
RUN python3 setup.py sdist bdist_wheel

# Install actinia-gdi plugin
RUN git clone https://github.com/mundialis/actinia-gdi.git /src/actinia-gdi
WORKDIR /src/actinia-gdi
RUN pip3 install -r requirements.txt && python3 setup.py install
RUN python3 setup.py sdist bdist_wheel


# Copy actinia config file and start scripts + set needed envs
COPY docker/actinia-core/actinia.cfg /etc/default/actinia
COPY docker/actinia-core/start.sh /src/start.sh
COPY docker/actinia-core/start-dev.sh /src/start-dev.sh
ENV ACTINIA_CUSTOM_TEST_CFG /etc/default/actinia
ENV GISBASE ""

# Create the database directories
RUN mkdir -p /actinia_core/grassdb && \
    mkdir -p /actinia_core/resources && \
    mkdir -p /actinia_core/workspace/tmp && \
    mkdir -p /actinia_core/workspace/temp_db && \
    mkdir -p /actinia_core/workspace/actinia && \
    mkdir -p /actinia_core/workspace/download_cache && \
    mkdir -p /actinia_core/userdata

VOLUME /grassdb

ENTRYPOINT ["/bin/sh"]
CMD ["/src/start.sh"]

EXPOSE 8088
EXPOSE 9191
